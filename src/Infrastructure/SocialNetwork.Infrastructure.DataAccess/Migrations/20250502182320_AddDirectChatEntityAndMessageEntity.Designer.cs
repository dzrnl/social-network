// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialNetwork.Infrastructure.DataAccess;

#nullable disable

namespace SocialNetwork.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(SocialNetworkDbContext))]
    [Migration("20250502182320_AddDirectChatEntityAndMessageEntity")]
    partial class AddDirectChatEntityAndMessageEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Friendship", b =>
                {
                    b.Property<long>("FriendId")
                        .HasColumnType("bigint")
                        .HasColumnName("friend_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("FriendId", "UserId")
                        .HasName("pk_friendship");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_friendship_user_id");

                    b.ToTable("friendship", (string)null);
                });

            modelBuilder.Entity("SocialNetwork.Infrastructure.DataAccess.Entities.DirectChatEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_message_id");

                    b.Property<long?>("User1Id")
                        .HasColumnType("bigint")
                        .HasColumnName("user1id");

                    b.Property<long?>("User2Id")
                        .HasColumnType("bigint")
                        .HasColumnName("user2id");

                    b.HasKey("Id")
                        .HasName("pk_direct_chats");

                    b.HasIndex("LastMessageId")
                        .HasDatabaseName("ix_direct_chats_last_message_id");

                    b.HasIndex("User2Id")
                        .HasDatabaseName("ix_direct_chats_user2id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("ix_direct_chats_user1id_user2id");

                    b.ToTable("direct_chats", (string)null);
                });

            modelBuilder.Entity("SocialNetwork.Infrastructure.DataAccess.Entities.MessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_messages_sender_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("SocialNetwork.Infrastructure.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Friendship", b =>
                {
                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friendship_users_friend_id");

                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friendship_users_user_id");
                });

            modelBuilder.Entity("SocialNetwork.Infrastructure.DataAccess.Entities.DirectChatEntity", b =>
                {
                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.MessageEntity", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId")
                        .HasConstraintName("fk_direct_chats_messages_last_message_id");

                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.UserEntity", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .HasConstraintName("fk_direct_chats_users_user1id");

                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.UserEntity", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .HasConstraintName("fk_direct_chats_users_user2id");

                    b.Navigation("LastMessage");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SocialNetwork.Infrastructure.DataAccess.Entities.MessageEntity", b =>
                {
                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.DirectChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_direct_chats_chat_id");

                    b.HasOne("SocialNetwork.Infrastructure.DataAccess.Entities.UserEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_messages_users_sender_id");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialNetwork.Infrastructure.DataAccess.Entities.DirectChatEntity", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
