@using SocialNetwork.Application.Models
@model SocialNetwork.Presentation.Web.Models.Profile.ProfileViewModel

@{
    ViewData["Title"] = "Профиль";
    var currentUser = ViewData["CurrentUser"] as User;
}

<div class="container mt-4">
    <div class="card shadow-sm rounded-3">
        <div class="card-body d-flex align-items-center">
            <img src="/images/default-avatar.png" alt="Аватар" class="rounded-circle border" width="100" height="100">
            <div class="ml-4">
                <h4 class="mb-1">@Model.User.Name @Model.User.Surname</h4>
                <p class="text-muted mb-0">@Model.User.Username</p>
            </div>
        </div>
    </div>

    <div class="mt-4">
        @if (currentUser?.Id == Model.User.Id)
        {
            <form method="post" asp-controller="Auth" asp-action="Logout" class="text-right">
                <button type="submit" class="btn btn-outline-danger">Выйти</button>
            </form>
        }
        else if (currentUser != null && Model.FriendStatus != null && currentUser.Id != Model.User.Id)
        {
            @switch (Model.FriendStatus)
            {
                case FriendStatus.Friend:
                    <form method="post" asp-controller="Friends" asp-action="DeleteFriend"
                          asp-route-friendId="@Model.User.Id" class="text-right">
                        <input type="hidden" name="returnUrl" value="@Context.Request.Path"/>
                        <button type="submit" class="btn btn-outline-danger">Удалить из друзей</button>
                    </form>
                    break;
                    
                case FriendStatus.NotFriend:
                    <form method="post" asp-controller="Friends" asp-action="SendFriendRequest"
                          asp-route-friendId="@Model.User.Id" class="text-right">
                        <input type="hidden" name="returnUrl" value="@Context.Request.Path"/>
                        <button type="submit" class="btn btn-outline-success">Добавить в друзья</button>
                    </form>
                    break;

                case FriendStatus.Sent:
                    <form method="post" asp-controller="Friends" asp-action="CancelFriendRequest"
                          asp-route-requestId="@Model.FriendRequest?.Id" class="text-right">
                        <input type="hidden" name="returnUrl" value="@Context.Request.Path"/>
                        <button type="submit" class="btn btn-outline-danger">Отменить заявку</button>
                    </form>
                    break;

                case FriendStatus.Incoming:
                    <form method="post" asp-controller="Friends" asp-action="AcceptFriendRequest"
                          asp-route-requestId="@Model.FriendRequest?.Id" class="text-right">
                        <input type="hidden" name="returnUrl" value="@Context.Request.Path"/>
                        <button type="submit" class="btn btn-outline-success">Принять заявку</button>
                    </form>
                    break;
                case null:
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    </div>

    <hr/>

    @foreach (var post in Model.UserPosts)
    {
        @await Html.PartialAsync("_Post", post, new ViewDataDictionary(ViewData)
        {
            ["CurrentUser"] = currentUser
        })
    }
</div>